// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  userId Int @id @default(autoincrement())
  username String
  password String
  updatedAt DateTime @updatedAt
  roleId Int
  role Roles @relation(fields: [roleId], references: [roleId])
  refreshTokens RefreshToken[]
}

model Roles {
  roleId Int @id @default(autoincrement())
  roleName String
  users Users[]
  permits PermitsInRole[]
}

model PermitsInRole {
  roleId Int
  role Roles @relation(fields: [roleId], references: [roleId])
  permitId Int
  permit Permits @relation(fields: [permitId], references: [permitId])
  @@id([roleId, permitId])
}
model Permits {
  permitId Int @id @default(autoincrement())
  action Permisos
  area Areas
  roles PermitsInRole[]
}
enum Areas {
  COMANDAS
  EMPLEADOS
  PRODUCTOS
  PLATILLOS
  COMPRAS
  USUARIOS
}
enum Permisos {
  VER
  EDITAR
}

model RefreshToken {
  id String @id @unique @default(uuid())
  hashedToken String @db.VarChar(255)
  userId Int
  user Users @relation(fields: [userId], references: [userId])
  revoked Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Categorias {
  categoriaId Int @id @default(autoincrement())
  categoriaNombre String
  descripcion String @db.Text
  imagenId Int @default(1)
  imagen Imagenes @relation(fields: [imagenId], references: [imagenId])
  platillos Platillos[]
}

model Platillos {
  platilloId Int @id @default(autoincrement())
  platilloNombre String
  descripcion String @db.Text
  precio Decimal
  categoriaId Int
  categoria Categorias @relation(fields: [categoriaId], references: [categoriaId])
  platillosEnComanda PlatillosEnComandas[]
  productosEnPlatillo ProductosEnPlatillos[]
  imagenId Int
  imagen Imagenes @relation(fields: [imagenId], references: [imagenId])
}

model Productos {
  productoId Int @id @default(autoincrement())
  productoNombre String
  cantidad Int @db.UnsignedInt
  cantidadMax Int @db.UnsignedInt
  fechaCaducidad DateTime @default(now())
  produdctosEnPlatillo ProductosEnPlatillos[]
  productosEnCompra ProductosEnCompras[]
}

model Compras {
  compraId Int @id @default(autoincrement())
  fechaCompra DateTime
  total Decimal
  productosEnCompra ProductosEnCompras[]
}

model Empleados {
  empleadoId Int @id @default(autoincrement())
  empleadoNombre String
  paterno String @db.VarChar(30)
  materno String @db.VarChar(30)
  telefono String @db.VarChar(10)
  puestoId Int
  puesto Puestos @relation(fields: [puestoId], references: [puestoId])
  comandas Comandas[]
  imagenId Int
  imagen Imagenes @relation(fields: [imagenId], references: [imagenId])
}

model Imagenes {
  imagenId Int @id @default(autoincrement())
  tipo String
  url String
  empleado Empleados[]
  platillo Platillos[]
  categoria Categorias[]
}

model Puestos {
  puestoId Int @id @default(autoincrement())
  puestoNombre String  @unique
  sueldo Decimal
  empleados Empleados[]
}

model Clientes {
  clienteId Int @id @default(autoincrement())
  clienteNombre String @db.VarChar(30)
  paterno String @db.VarChar(30)
  materno String @db.VarChar(30)
  telefono String? @db.VarChar(10)
  comandas Comandas[]
}

model Mesas {
  mesaId Int @id @default(autoincrement())
  capacidad Int
  ubicacion String @db.Text
  tipoMesa String
  ocupada Boolean @default(false)
  comandas Comandas[]
}

model Comandas {
  comandaId Int @id @default(autoincrement())
  clienteId Int
  cliente Clientes @relation(fields: [clienteId], references: [clienteId])
  empleadoId Int
  empleado Empleados @relation(fields: [empleadoId], references: [empleadoId])
  mesaId Int
  mesa Mesas @relation(fields: [mesaId], references: [mesaId])
  completada Estatus @default(PENDIENTE)
  precioFinal Decimal?
  fechaCreacion DateTime @default(now())
  fechaCierre DateTime?
  platillosEnComanda PlatillosEnComandas[]
}

enum Estatus {
  PENDIENTE
  INICIADA
  ENTREGADA
  PAGADA
  CANCELADA
}

model PlatillosEnComandas {
  cantidad Int @db.UnsignedInt
  platilloId Int
  platillo Platillos @relation(fields: [platilloId], references: [platilloId])
  comandaId Int
  comanda Comandas @relation(fields: [comandaId], references: [comandaId])
  @@id([platilloId, comandaId])
}

model ProductosEnPlatillos {
  cantidad Float
  productoId Int
  producto Productos @relation(fields: [productoId], references: [productoId])
  platilloId Int
  platillo Platillos @relation(fields: [platilloId], references: [platilloId])
  @@id([productoId, platilloId])
}

model ProductosEnCompras {
  cantidad Float
  precioTotal Float
  compraId Int
  compra Compras @relation(fields: [compraId], references: [compraId], onDelete: Cascade)
  productoId Int
  producto Productos @relation(fields: [productoId], references: [productoId], onDelete: Cascade)
  @@id([compraId, productoId])
}